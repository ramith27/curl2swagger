services:
  postgres:
    image: postgres:15-alpine
    container_name: curl2swagger-postgres
    environment:
      POSTGRES_DB: curl2swagger
      POSTGRES_USER: curl2swagger
      POSTGRES_PASSWORD: password123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U curl2swagger -d curl2swagger"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: curl2swagger-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
      target: production
    container_name: curl2swagger-backend
    ports:
      - "3003:3003"
    environment:
      DATABASE_URL: postgresql://curl2swagger:password123@postgres:5432/curl2swagger
      REDIS_URL: redis://redis:6379
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      NODE_ENV: production
      BACKEND_PORT: 3003
      FRONTEND_URL: ${FRONTEND_URL:-https://yourdomain.com}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  dashboard:
    build:
      context: .
      dockerfile: apps/dashboard/Dockerfile
      target: runner
    container_name: curl2swagger-dashboard
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-https://api.yourdomain.com}
      NODE_ENV: production
      PORT: 3000
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: curl2swagger-network
